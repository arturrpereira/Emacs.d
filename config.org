* Packages
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
#+end_src 

* Use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src

* Theme
#+begin_src emacs-lisp
  (use-package modus-themes
    :ensure t)
  (load-theme 'modus-vivendi t)
#+end_src

* Sanity settings
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) 

  (tool-bar-mode -1) 

  (menu-bar-mode -1) 

  (scroll-bar-mode -1) 

  (global-visual-line-mode t) 

  (setq package-check-signature nil) 

  (prefer-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)

  (setq make-backup-files nil)

  (set-fringe-mode 0)

  (setq org-confirm-babel-evaluate nil)

  (custom-set-variables
   '(initial-frame-alist (quote ((fullscreen . maximized)))))
#+end_src

* Fonte
#+begin_src emacs-lisp
  (set-face-attribute 'default nil :font "SauceCodePro NFP" :weight 'semibold :height 95)
#+end_src

* Modeline
#+begin_src emacs-lisp
(setq modus-theme-mode-line '(borderless))

(use-package doom-modeline
  :ensure t)
(doom-modeline-mode 1)
#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))

(setq dashboard-display-icons-p t) 
(setq dashboard-icon-type 'nerd-icons)

(setq dashboard-set-file-icons t)
(setq dashboard-set-heading-icons t)
(setq dashboard-heading-icons '((recents   . "nf-oct-history")
				(bookmarks . "nf-oct-bookmark")
				(agenda    . "nf-oct-calendar")
				(projects  . "nf-oct-rocket")
				(registers . "nf-oct-database")))
#+end_src

* Evil
#+begin_src emacs-lisp
(setq evil-want-keybinding nil)
(use-package evil
  :ensure t
  :config
  (evil-mode 1))
(setq evil-auto-indent nil)

(use-package evil-collection
  :ensure t
  )
(evil-collection-init '(magit dired org))

(use-package undo-tree
  :ensure t)

(use-package undo-fu
  :ensure t)

(evil-set-undo-system 'undo-redo)
#+end_src

* Org
** Roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert))
  :config
  (org-roam-setup))
#+end_src

* Languages
** Ledger
#+begin_src emacs-lisp
(use-package ledger-mode
  :ensure t)
#+end_src

* Vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))
#+end_src
