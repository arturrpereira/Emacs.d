* Packages
#+begin_src emacs-lisp
  (require 'package)
  (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
  ;; and `package-pinned-packages`. Most users will not need or want to do this.
  (add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
  (package-initialize)
#+end_src 

* Use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+end_src

* Theme
#+begin_src emacs-lisp
(use-package modus-themes
  :ensure t)
(load-theme 'modus-vivendi t)
#+end_src

* Sanity settings
#+begin_src emacs-lisp
  (setq inhibit-startup-message t) 

  (tool-bar-mode -1) 

  (menu-bar-mode -1) 

  (scroll-bar-mode -1) 

  (global-visual-line-mode t) 

  (setq package-check-signature nil) 

  (prefer-coding-system 'utf-8)
  (setq-default buffer-file-coding-system 'utf-8)

  (setq make-backup-files nil)

  (set-fringe-mode 0)

  (setq org-confirm-babel-evaluate nil)

  (setq org-startup-indented t)

  (custom-set-variables
   '(initial-frame-alist (quote ((fullscreen . maximized)))))

  (setq frame-resize-pixelwise t)
#+end_src

* Fonte
#+begin_src emacs-lisp
(set-face-attribute 'default nil :font "SauceCodePro NFP" :weight 'semibold :height 95)
#+end_src

* Modeline
#+begin_src emacs-lisp
(setq modus-theme-mode-line '(borderless))

(use-package doom-modeline
  :ensure t)
(doom-modeline-mode 1)
#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))

(setq dashboard-display-icons-p t) 
(setq dashboard-icon-type 'nerd-icons)

(setq dashboard-set-file-icons t)
(setq dashboard-set-heading-icons t)
(setq dashboard-heading-icons '((recents   . "nf-oct-history")
				(bookmarks . "nf-oct-bookmark")
				(agenda    . "nf-oct-calendar")
				(projects  . "nf-oct-rocket")
				(registers . "nf-oct-database")))
#+end_src

* Evil
#+begin_src emacs-lisp
(setq evil-want-keybinding nil)
(use-package evil
  :ensure t
  :config
  (evil-mode 1))
;;(setq evil-auto-indent nil)

(use-package evil-collection
  :ensure t
  )
(evil-collection-init '(magit dired org))

(use-package undo-tree
  :ensure t)

(use-package undo-fu
  :ensure t)

(evil-set-undo-system 'undo-redo)
#+end_src

* Org
** Roam
#+begin_src emacs-lisp
(use-package org-roam
  :ensure t
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n i" . org-roam-node-insert))
  :config
  (org-roam-setup))
#+end_src

* Languages
** Ledger
#+begin_src emacs-lisp
(use-package ledger-mode
  :ensure t)
#+end_src

* Vertico
#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :init
  (vertico-mode))

(use-package savehist
  :init
  (savehist-mode))
#+end_src

* Doom themes
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-dracula t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* LSP
#+begin_src emacs-lisp
(use-package lsp-mode
  :ensure t)
#+end_src

* Python
#+begin_src emacs-lisp
(use-package python-mode
  :ensure t
  :hook (python-mode . lsp-deferred))

(add-hook 'python-mode-hook
          (lambda ()
            (setq python-indent-offset 4) ;; Define a indentação para 4 espaços
            (setq python-indent-guess-indent-offset nil) ;; Desativa a adivinhação automática da indentação
            (setq python-indent-guess-indent-offset-verbose nil))) ;; Desativa mensagens de adivinhação de indentação
#+end_src

* Company
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :config
    (setq python-indent-levels 4))

  (use-package company-box
    :ensure t
    :hook (company-mode . company-box-mode))
#+end_src 

* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t)

  (require 'yasnippet)
  (yas-global-mode 1)
#+end_src

* Eshell
** Syntax Highlighting
#+begin_src emacs-lisp
  (use-package eshell-syntax-highlighting
    :after eshell
    :ensure t ;; Install if not already installed.
    ;; Enable in all Eshell buffers.
    :config
    (eshell-syntax-highlighting-global-mode +1))
#+end_src
** Autosuggestions
#+begin_src emacs-lisp
  (use-package esh-autosuggest
    :hook (eshell-mode . esh-autosuggest-mode)
    ;; If you have use-package-hook-name-suffix set to nil, uncomment and use the
    ;; line below instead:
    ;; :hook (eshell-mode-hook . esh-autosuggest-mode)
    :ensure t)

  (add-hook 'eshell-mode-hook #'esh-autosuggest-mode)

#+end_src
